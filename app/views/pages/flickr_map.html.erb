<style>
.area {
  fill: url(#temperature-gradient);
  opacity:0.7;
  stroke-width: 1px;
}

.axis.y line,
.axis.y path{
  stroke: white;
  stroke-width: 2px;
}

.axis.y text {
  fill: white;
  text-shadow: 1px 1px 3px black;
  font-size: 18px;
}

.map-group {
  fill: white;
  stroke: black;
}

.map-group-container {
  position: fixed;
  top:0;
  bottom:0;
  right:50px;
  min-width: 400px;
}

circle.photo {
  fill: red;
  opacity: 0.1;
  stroke: none;
}

</style>

<div class="flickr-photo-wrapper">

  <!-- Fixed map of manhattan -->
  <div class="map-group-container">
  </div>

  <div class="header">
    <!-- Full height header -->
    <section class="title full-height text-center">
      <div class="text-container">
        <div class="inner-container">
          <h1 class="">WTF Are Tourists Taking Photos Of in NYC?</h1>
          <h2 class=''>The interactive story of 55,000 photos</h2>
          <p class="no-margin down-arrow">
            Scroll to Start
            <i class="fa fa-chevron-down" aria-hidden="true"></i>
          </p>
        </div>
      </div>
    </section>

    <section class="how-its-made full-height">
      <div class="text-container">
        <div class="inner-container hidden story">
          <h3 class="">Once upon a time...</h3>
          <p>...there was an island called Manhattan. Every day, 4 million people flood its streets. Some of them have cameras. And some of those people with cameras upload their photos to Flickr. </p>
        </div>
      </div>
    </section>

    <section class="know-manhattan full-height"></section>
  </div>

  <!-- Body of viz -->
  <section id="viz" class="viz"></section>

  <!-- call to action -->
  <div class="bottom-cta"></div>
</div>


<script>

  // Scroll triggers
  // docs: https://github.com/camwiegert/in-view
  inView('.story')
      .on('enter', (el) => {
        console.log('in view');
        $(el).removeClass('hidden').addClass('fadeInLeft animated')
        $(el).one('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', () => {
          $(el).removeClass('fadeInLeft animated')
        })
      })
      .on('exit', el => {
        console.log('out')
        $(el).addClass('hidden')
      });

  // Create time series values
  let baseDate = Date.parse('2016-1-1 05:00')
  let timeSeriesDates = [baseDate.toString('yyyy-MM-dd HH:mm')]
  let i = 1
  while(i < 25) {
    newDate = baseDate.add(1).hour()
    timeSeriesDates.push(newDate.toString('yyyy-MM-dd HH:mm'))
    i += 1
  }

  const height = 120
  const margin = {left: 0, right: 0, top: 50, bottom: 50}
  const hoursToShow = 2 // number of hours to show on one screen height
  const hourHeight = (window.innerHeight/hoursToShow)
  const vizHeight = 24*hourHeight
  const width = vizHeight



  // create scale for axis
  let y = d3.scaleLinear()
            .domain([0,d3.max(d3.values(gon.frequency_map))])
            .range([height,0]) // invert this so I don't have to subtract later

  const parseDate = d3.timeParse('%Y-%m-%d %H:%M') // creating a parser tool, puts dates in that format
  const hourFormat = d3.timeFormat("%-H")
  const hourOrder = timeSeriesDates.map((d) => parseInt(hourFormat(parseDate(d))))

  let x = d3.scaleTime()
            .domain(d3.extent(timeSeriesDates, (d) => parseDate(d))) // extent is a function that returns an array [min, max]
            .range([0, width - margin.top]) // actual screen pixels

  const yAxisHeight = (width) - 40
  let yAxisScale = d3.scaleTime()
                  .domain(d3.extent(timeSeriesDates, (d) => parseDate(d))) // extent is a function that returns an array [min, max]
                  .range([0, yAxisHeight]) // actual screen pixels

  // create axis generator
  const timeFormatter = d3.timeFormat("%-I:%M %p")
  const yAxis = d3.axisRight(yAxisScale).ticks(48).tickFormat(timeFormatter)

  // area generator
  const area = d3.area()
                .x((d,i) => x(parseDate(timeSeriesDates[i])))
                .y0(height)
                .y1((d,i) => y(gon.frequency_map[d]))
                .curve(d3.curveCardinal)


  // Drawing this shit, add the base SVG
  const svg = d3.select('body .viz').append('svg')
              .attr('height', vizHeight)
              .attr('width', '100%')



  // chart and axis will be grouped and positioned together
  let chartGroup = svg.append('g')
                      .attr('transform', `translate(${margin.left}, 0)`)

  chartGroup.append("linearGradient")
      .attr("id", "temperature-gradient")
      .attr("gradientUnits", "userSpaceOnUse")
      .attr("x1", 0).attr("y1", 0)
      .attr("x2", width).attr("y2", 0)
    .selectAll("stop")
      .data([
        {offset: "5%", color: "#550090"},
        {offset: "15%", color: "#e1de02"},
        {offset: "40%", color: "#f5f21d"},
        {offset: "55%", color: "#e1de02"},
        {offset: "68%", color: "#550090"}
      ])
    .enter().append("stop")
      .attr("offset", function(d) { return d.offset; })
      .attr("stop-color", function(d) { return d.color; })

  //console.log('frequency_map', gon.frequency_map)

  // Add the line from the area geneator
  chartGroup.append('path')
            .attr('d', area(hourOrder))
            .attr('transform', `translate(${height}, ${margin.top}) rotate(90)`)
            .attr('class', 'area')

    // Add the yAxis
  svg.append('g') // axis are groups
            .attr('class', 'axis y')
            .attr('transform', `translate(5,${margin.top})`)
            .call(yAxis) // adding y axis to chart

  // Function called when zoom changes
  const minHeight = hourHeight/60 // height in pixels of one minute

  const drawMap = (error, geo, photos) => {
    const mapMaxWidth = 500
    const groupMarginLeft = 0

    const mapSvg = d3.select('.map-group-container').append('svg')
                      .attr('height', '100%')
                      .attr('width', '100%')

    // Map of manhattan container
    const mapGroup = mapSvg.append('g')
                      .attr('transform', `translate(0, 0)`)
                      .attr('class', 'map-group')

    const projection = d3.geoMercator()
                        .rotate([0, 0, 100])
                        .fitExtent([[0, margin.top], [mapMaxWidth, window.innerHeight - margin.top]], geo)


    const geoPath = d3.geoPath()
                    .projection(projection)

    //Adding clipping - SLOWS SHIT DOWN, this should be preprocessed
    // svg.append('defs').append('clipPath').attr('id', 'manhattan-border')
    //     .append('path').datum(geo)
    //     .attr('d', geoPath);

    // Drawing the map
    mapGroup.append('path')
              .attr('d', geoPath(geo))
              .attr('class', 'geo')
              .attr('transform', `translate(${groupMarginLeft}, 0)`)

    // Adding icons
    // mapGroup.append("svg:image")
    //  .attr('x', projection([-74.0466891, 40.6892534])[0])
    //  .attr('y', projection([-74.0466891, 40.6892534])[1])
    //  .attr('width', 32)
    //  .attr('height', 32)
    //  .attr('transform', `translate(-16, -32)`)
    //  .attr("href","/nyc/statue-of-liberty.png")

    // mapGroup.append("svg:image")
    //  .attr('x', projection([-73.9873197, 40.758895])[0])
    //  .attr('y', projection([-73.9873197, 40.758895])[1])
    //  .attr('width', 32)
    //  .attr('height', 32)
    //  .attr('transform', `translate(-16, -32)`)
    //  .attr("href","/nyc/times-square-32.png")

    // mapGroup.append("svg:image")
    //  .attr('x', projection([-73.9981622, 40.7058094])[0])
    //  .attr('y', projection([-73.9981622, 40.7058094])[1])
    //  .attr('width', 32)
    //  .attr('height', 32)
    //  .attr('transform', `translate(-16, -32)`)
    //  .attr("href","/nyc/brooklyn-bridge-32.png")

    // mapGroup.append("svg:image")
    //  .attr('x', projection([-74.0156334, 40.7055648])[0])
    //  .attr('y', projection([-74.0156334, 40.7055648])[1])
    //  .attr('width', 32)
    //  .attr('height', 32)
    //  .attr('transform', `translate(-16, -16)`)
    //  .attr("href","/nyc/bull-32.png")

    // Returns an array of the photos within the date range
    const validPhotos = () => {

      // get current scroll position of viz
      scrollTop = $(window).scrollTop() - $("#viz").offset().top

      // If i'm not in the visualization yet, do nothing
      if(scrollTop < 0 || scrollTop > vizHeight)
        return []

      // Oh boy, I should be visualizing stuff, time to do some math
      const seg = Math.floor(scrollTop / minHeight) // number of minutes to add
      const minutes = seg % 60
      let hoursBottom = Math.floor(seg / 60) + 5
      hoursBottom = hoursBottom >= 24 ? hoursBottom - 24 : hoursBottom
      let hoursTop = hoursBottom + 2
      hoursTop = hoursTop >= 24 ? hoursTop - 24 : hoursTop

      //console.log(`range: ${hoursBottom}:${minutes} to ${hoursTop}:${minutes}`)
      good = photos.photos.filter((p, i) => {
        if(hoursTop < hoursBottom) { // when looking at 11pm and 1 am
          if(p.hour <= hoursTop || p.hour >= hoursBottom) {
            if(p.hour == hoursTop) // need to check the minutes
              return (p.minute <= minutes)
            else if (p.hour == hoursBottom)
              return (p.minute >= minutes)
            else // I'm in an inbetween hour
              return true
          } else
            return false
        }
        else {
          if(p.hour >= hoursBottom && p.hour <= hoursTop) {
            if(p.hour == hoursTop) // need to check the minutes
              return (p.minute <= minutes)
            else if (p.hour == hoursBottom)
              return (p.minute >= minutes)
            else // I'm in an inbetween hour
              return true
          } else
            return false
        }
        //return true
      })

      //console.log('validPhotos.length', good.length)
      return good
    }

    const drawCircles = () => {
      const mapData = mapGroup.selectAll('circle.photo')
            .data(validPhotos)


      mapData.enter().append('circle')
              .attr('cx', (d,i) => projection([d.lng, d.lat])[0])
              .attr('cy', (d,i) => projection([d.lng, d.lat])[1])
              .attr('r', 3)
              .attr('class', 'photo')
              .attr('transform', `translate(${groupMarginLeft}, 0)`)
              //.attr('clip-path', 'url(#manhattan-border)') // SLOWS IT DOWN INCREDIBLY

      mapData.exit().remove()

    }

    window.onscroll = (e) => {
      // baseDate = Date.parse('2016-1-1 05:00') // reset
      // const scrollTop = (window.pageYOffset !== undefined) ? window.pageYOffset : (document.documentElement || document.body.parentNode || document.body).scrollTop

      // const seg = Math.floor(scrollTop / minHeight) // number of minutes to add
      //console.log ('seg', seg)
      // const topTime = baseDate.add(seg).minutes().toString('HH:mm')
      // const bottomTime = baseDate.add(hoursToShow).hours().toString('HH:mm')
      // console.log(`showing: ${topTime}-${bottomTime}`)
      //
      drawCircles()
    }

    drawCircles()

  }



  // Load the data
  d3.queue()
    .defer(d3.json, '/nyc/manhattan-outline.geojson')
    .defer(d3.json, '/nyc/new-york-photos-hour-md.json')
    .await(drawMap)
</script>


<script>
  let dataArray = [5,11,18]
   // Creating our SVG canvas
  let svg = d3.select('body').append('svg')
              .attr('width', '100%')
              .attr('height', '300px')

  // Creates color scale
  const rainbow = d3.scaleSequential(d3.interpolateRainbow) // algorithm to use, there are built in ones
                    .domain([0,18]) //18 is the maximum value in my data

  svg.selectAll('rect') // returns all rectangles in the svg, or an empty array
      .data(dataArray) // binds array to found svg elements
      .enter() // any data not bound to a rectangle get put in this enter selection (in this case, 3)
      .append('rect') // adds a rectagle for each item in the enter selection
        .attr('fill', (d,i) => rainbow(d))
        .attr('width', '50')
        .attr('height', (d,i) => 15*d)
        .attr('x', (d,i) => {return 60 * i})
        .attr('y', (d,i) => 300-(15*d)) // inverts the bar graph. 300 px is bottom of graph, and you build bar from top to bottom

  let newX = 200 // horizontal offset for circles
  svg.selectAll('circle')
      .data(dataArray)
      .enter()
      .append('circle')
        .attr('r', (d,i) => d*2)
        .attr('cx', (d,i) => {
          newX += (d*4) + (10) // size of circle (double the radius) + offset for each circle
          return newX
        })
        .attr('cy', (d,i) => 150)

  newX = 400 // horizontal offset for ellipses
  svg.selectAll('ellipse')
    .data(dataArray)
    .enter()
    .append('ellipse')
      .attr('class', 'ellipsy')
      .attr('rx', (d,i) => 30)
      .attr('ry', (d,i) => d*2)
      .attr('cx', (d,i) => {
        newX += (30*2) + (10) // size of circle + offset for each circle
        return newX
      })
      .attr('cy', (d,i) => 150)


  newX = 600 // horizontal offset
  svg.selectAll('line')
    .data(dataArray)
    .enter()
    .append('line')
      .attr('stroke', 'blue')
      .attr('stroke-width', 2)
      .attr('x1', newX)
      .attr('y1', 300)
      .attr('x2', (d,i) => (d*20) + newX)
      .attr('y2', (d,i) => (300-(i*100)))

  // New lines
  svg = d3.select('body').append('svg')
              .attr('width', '100%')
              .attr('height', '300px')

  svg.append('text')
      .text('Hey dude')
      .attr('x', 20)
      .attr('y', 80)

  // New lines for generator
  svg = d3.select('body').append('svg')
              .attr('width', '100%')
              .attr('height', '300px')

  // random data elements that will be fed into our generator
  dataArray = [{x:10, y:5},{x:20, y:58},{x:30, y:45},{x:60, y:15},{x:80, y:69}]

  let lineGenerator = d3.line() // Not an SVG line
                        .x((d,i) => d.x*6)
                        .y((d,i) => d.y*4)
                        .curve(d3.curveCardinal) // creates curved instead of straight lines
  svg.append('path')
      .attr('d', lineGenerator(dataArray)) // d = required data element
      .attr('fill', 'none') // defaults to filled shape
      .attr('stroke', 'red')
      .attr('stroke-width', '3px')
</script>
